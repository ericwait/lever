function MakeSegHelp()
    funcPrefix = {
        '% helpStruct = CompiledSegHelp(funcName)'
        '% Return a cached segmentation function help string.'
        '%'
        '% Note: This file is autogenerated by build script DO NOT MODIFY!!'
        ''
        'function helpStruct = CompiledSegHelp(funcName)'
        '    helpStruct = [];'
        '    funcStructs = struct(''func'',{}, ''summary'',{}, ''paramHelp'',{});'};
    
    helpTemplate = struct(...
        'func', {'    funcStructs(%d).func = ''%s'';'},...
        'summary',{'    funcStructs(%d).summary = ''%s'';'},...
        'param',{'    funcStructs(%d).paramHelp = {%s};'});
    
    funcPostfix = {
        '    segFuncs = {funcStructs.func};'
        '    funcIdx = find(strcmp(segFuncs,funcName));'
        '    if ( isempty(funcIdx) )'
        '    	return;'
        '    end'
        '    '
        '    helpStruct = funcStructs(funcIdx);'
        'end'};

    SupportedTypes = Load.GetSupportedCellTypes();
    segInfo = [SupportedTypes.segRoutine];
    segFuncs = arrayfun(@(x)(char(x.func)), segInfo, 'UniformOutput',false);
    
    helpStruct = [];
    for i=1:length(segFuncs)
        newStruct = Dev.FrameSegHelp(segFuncs{i});
        if ( isempty(newStruct) )
            error('Unrecognized segmentation algorithm!');
        end
        
        helpStruct = [helpStruct; newStruct];
    end

    fid = fopen(fullfile('+Dev','CompiledSegHelp.m'),'w');
    %%
    for i=1:length(funcPrefix)
        fprintf(fid, '%s\n', funcPrefix{i});
    end
    fprintf(fid, '\n');
    
    %%
    for i=1:length(helpStruct)
        paramString = '';
        for j=1:length(helpStruct(i).paramHelp)
            paramString = [paramString sprintf('\n        ''%s'';', helpStruct(i).paramHelp{j})];
        end
        
        fprintf(fid, [helpTemplate.func '\n'], i, helpStruct(i).func);
        fprintf(fid, [helpTemplate.summary '\n'], i, helpStruct(i).summary);
        fprintf(fid, [helpTemplate.param '\n\n'], i, paramString);
    end
    
    %%
    for i=1:length(funcPostfix)
        fprintf(fid, '%s\n', funcPostfix{i});
    end
    fclose(fid);
end
