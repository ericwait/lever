function CreateMenuBar(handle)
%This sets up the custom menu bar for the given figure handle

%--Eric Wait

global Figures

fileMenu = uimenu(...
    'Parent',           handle,...
    'Label',            'File',...
    'HandleVisibility', 'callback');

editMenu = uimenu(...
    'Parent',           handle,...
    'Label',            'Edit',...
    'HandleVisibility', 'callback');

viewMenu = uimenu(...
    'Parent',           handle,...
    'Label',            'View',...
    'HandleVisibility', 'callback');

uimenu(...
    'Parent',           fileMenu,...
    'Label',            'Open',...
    'HandleVisibility', 'callback', ...
    'Callback',         @openFile,...
    'Accelerator',      'o');

uimenu(...
    'Parent',           fileMenu,...
    'Label',            'Close',...
    'HandleVisibility', 'callback', ...
    'Callback',         @CloseFigure,...
    'Accelerator',      'w');

saveMenu = uimenu(...
    'Parent',           fileMenu,...
    'Label',            'Save',...
    'Separator',        'on',...
    'HandleVisibility', 'callback', ...
    'Callback',         @saveFile,...
    'Enable',           'off',...
    'Accelerator',      's');

uimenu(...
    'Parent',           fileMenu,...
    'Label',            'Save As...',...
    'HandleVisibility', 'callback', ...
    'Callback',         @saveFileAs);

uimenu(...
    'Parent',           fileMenu,...
    'Label',            'Export Image',...
    'Separator',        'on',...
    'HandleVisibility', 'callback', ...
    'Callback',         @exportImage,...
    'Visible',        'off');

uimenu(...
    'Parent',           fileMenu,...
    'Label',            'Print',...
    'Separator',        'on',...
    'HandleVisibility', 'callback', ...
    'Callback',         @printFigure);

uimenu(...
    'Parent',           fileMenu,...
    'Label',            'Export Movie Tiffs',...
    'Separator',        'on',...
    'HandleVisibility', 'callback', ...
    'Callback',         @makeMovie);

uimenu(...
    'Parent',           fileMenu,...
    'Label',            'Export Cell Metrics',...
    'HandleVisibility', 'callback', ...
    'Callback',         @ExportMetrics);

undoMenu = uimenu(...
    'Parent',           editMenu,...
    'Label',            'Undo',...
    'HandleVisibility', 'callback', ...
    'Callback',         @undo,...
    'Enable',           'off',...
    'Accelerator',      'z');

redoMenu = uimenu(...
    'Parent',           editMenu,...
    'Label',            'Redo',...
    'HandleVisibility', 'callback', ...
    'Callback',         @redo,...
    'Enable',           'off',...
    'Accelerator',      'y');

labelsMenu = uimenu(...
    'Parent',           viewMenu,...
    'Label',            'Show Labels',...
    'HandleVisibility', 'callback',...
    'Callback',         @toggleLabels,...
    'Checked',          'on',...
    'Accelerator',      'l');

siblingsMenu = uimenu(...
    'Parent',           viewMenu,...
    'Label',            'Show Sister Cell Relationships',...
    'HandleVisibility', 'callback',...
    'Callback',         @toggleSiblings,...
    'Checked',          'off',...
    'Accelerator',      'b');

imageMenu = uimenu(...
    'Parent',           viewMenu,...
    'Label',            'Show Image',...
    'HandleVisibility', 'callback',...
    'Callback',         @toggleImage,...
    'Checked',          'on',...
    'Accelerator',      'i');

playMenu = uimenu(...
    'Parent',           viewMenu,...
    'Label',            'Play',...
    'HandleVisibility', 'callback',...
    'Callback',         @TogglePlay,...
    'Checked',          'off',...
    'Accelerator',      'p');

uimenu(...
    'Parent',           viewMenu,...
    'Label',            'Go to Frame...',...
    'HandleVisibility', 'callback',...
    'Callback',         @timeJump,...
    'Accelerator',      't');

uimenu(...
    'Parent',           viewMenu,...
    'Label',            'Display Largest Tree',...
    'HandleVisibility', 'callback',...
    'Callback',         @FindLargestTree,...
    'Separator',      'on');

uimenu(...
    'Parent',           viewMenu,...
    'Label',            'Display Tree...',...
    'HandleVisibility', 'callback',...
    'Callback',         @displayTree);

if(strcmp(get(handle,'Tag'),'cells'))
    Figures.cells.menuHandles.saveMenu = saveMenu;
    Figures.cells.menuHandles.undoMenu = undoMenu;
    Figures.cells.menuHandles.redoMenu = redoMenu;
    Figures.cells.menuHandles.labelsMenu = labelsMenu;
    Figures.cells.menuHandles.playMenu = playMenu;
    Figures.cells.menuHandles.siblingsMenu = siblingsMenu;
    Figures.cells.menuHandles.imageMenu = imageMenu;
else
    Figures.tree.menuHandles.saveMenu = saveMenu;
    Figures.tree.menuHandles.undoMenu = undoMenu;
    Figures.tree.menuHandles.redoMenu = redoMenu;
    Figures.tree.menuHandles.labelsMenu = labelsMenu;
    Figures.tree.menuHandles.playMenu = playMenu;
    Figures.tree.menuHandles.siblingsMenu = siblingsMenu;
    Figures.tree.menuHandles.imageMenu = imageMenu;
end
end

%% Callback functions

function openFile(src,evnt)
LEVer();
end

function saveFile(src,evnt)
SaveData();
end

function saveFileAs(src,evnt)
SaveDataAs();
end

function exportImage(src,evnt)
ExportImage(src);
end

function printFigure(src,evnt)
printdlg;
end

function makeMovie(src,evnt)
global CONSTANTS Figures
choice = questdlg('Please set the zoom that you would like for the duration of the movie.  Click OK when accomplished.','Set Zoom','OK','Cancel','OK');
switch choice
    case 'Cancel'
        return
end
xLim = get(get(Figures.cells.handle, 'CurrentAxes'),'XLim');
yLim = get(get(Figures.cells.handle, 'CurrentAxes'),'YLim');
dim = [floor(xLim(2)-xLim(1)) floor(yLim(2)-yLim(1))];
answer = inputdlg({'Enter the prefix for the exported files:','Enter Frames Per Second:','Enter X Dimension:','Enter Y Dimension'},...
    'Movie Options',1,{CONSTANTS.datasetName,'1',num2str(1024),num2str(384)});%num2str(CONSTANTS.imageSize(2)),num2str(CONSTANTS.imageSize(1))
if(isempty(answer)),return,end

filename = answer(1);
try
    MakeMovie(filename{1},str2double(answer(2)),[str2double(answer(3)) str2double(answer(4))]);
catch errorMessage
    disp(errorMessage);
end
end

function undo(src,evnt)
History('Pop');
end

function redo(src,evnt)
History('Redo');
end

function toggleLabels(src,evnt)
global Figures
if(strcmp(get(Figures.cells.menuHandles.labelsMenu, 'Checked'), 'on'))
    set(Figures.cells.menuHandles.labelsMenu, 'Checked', 'off');
    set(Figures.tree.menuHandles.labelsMenu, 'Checked', 'off');
    DrawCells();
else
    set(Figures.cells.menuHandles.labelsMenu, 'Checked', 'on');
    set(Figures.tree.menuHandles.labelsMenu, 'Checked', 'on');
    DrawCells();
end
end

function toggleSiblings(src,evnt)
global Figures
if(strcmp(get(Figures.cells.menuHandles.siblingsMenu, 'Checked'), 'on'))
    set(Figures.cells.menuHandles.siblingsMenu, 'Checked', 'off');
    set(Figures.tree.menuHandles.siblingsMenu, 'Checked', 'off');
    DrawCells();
else
    set(Figures.cells.menuHandles.siblingsMenu, 'Checked', 'on');
    set(Figures.tree.menuHandles.siblingsMenu, 'Checked', 'on');
    DrawCells();
end
end

function toggleImage(src,evnt)
global Figures
if(strcmp(get(Figures.cells.menuHandles.imageMenu, 'Checked'), 'on'))
    set(Figures.cells.menuHandles.imageMenu, 'Checked', 'off');
    set(Figures.tree.menuHandles.imageMenu, 'Checked', 'off');
    DrawCells();
else
    set(Figures.cells.menuHandles.imageMenu, 'Checked', 'on');
    set(Figures.tree.menuHandles.imageMenu, 'Checked', 'on');
    DrawCells();
end
end

function timeJump(src,evnt)
global Figures HashedCells
answer = inputdlg('Enter Frame Number:','Jump to Time...',1,{num2str(Figures.time)});

if(isempty(answer)),return,end;
answer = str2double(answer(1));

if(answer < 1)
    Figures.time = 1;
elseif(answer > length(HashedCells))
    Figures.time = length(HashedCells);
else
    Figures.time = answer;
end
UpdateTimeIndicatorLine();
DrawCells();
end

function displayTree(src,evnt)
global CellTracks
answer = inputdlg('Enter Tree Containing Cell:','Display Tree',1);
answer = str2double(answer);

if(isempty(answer)),return,end

if(0>=answer || isempty(CellTracks(answer).hulls))
    msgbox([num2str(answer) ' is not a valid cell'],'Not Valid','error');
    return
end
DrawTree(CellTracks(answer).familyID);
end
